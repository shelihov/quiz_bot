# –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
import logging
import asyncio
import random
import os
from datetime import datetime
from collections import defaultdict
from aiogram import Bot, Dispatcher, Router, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from aiogram.filters import Command, CommandObject
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
from openai import OpenAI

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)
logger = logging.getLogger(__name__)

load_dotenv()
API_TOKEN = os.getenv('BOT_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
ADMIN_ID = int(os.getenv('ADMIN_ID'))

bot = Bot(token=API_TOKEN)
router = Router()
client = OpenAI(base_url="https://openrouter.ai/api/v1", api_key=OPENROUTER_API_KEY)
user_quiz_count = defaultdict(int)
user_state = {}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
def is_paid_user(user_id: int) -> bool:
    if user_id == ADMIN_ID:
        return True
    try:
        with open("paid_users.txt", "r") as f:
            for line in f:
                uid, exp = line.strip().split(":")
                if str(user_id) == uid:
                    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: –Ω–∞–π–¥–µ–Ω, exp={exp}")
                    return datetime.now() < datetime.strptime(exp, "%Y-%m-%d")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–∞: {e}")
    return False

# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.message(Command("add_user"))
async def add_user(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
    args = message.text.split()
    if len(args) != 3:
        return await message.answer("/add_user <user_id> <YYYY-MM-DD>")
    uid, exp = args[1], args[2]
    with open("paid_users.txt", "a") as f:
        f.write(f"{uid}:{exp}\n")
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –¥–æ {exp}")
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –¥–æ–±–∞–≤–ª–µ–Ω –¥–æ {exp}")

@router.message(Command("remove_user"))
async def remove_user(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("–ù–µ—Ç –ø—Ä–∞–≤.")
    uid = message.text.split()[1]
    with open("paid_users.txt", "r") as f:
        lines = f.readlines()
    with open("paid_users.txt", "w") as f:
        for line in lines:
            if not line.startswith(uid + ":"):
                f.write(line)
    logger.info(f"–£–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}")
    await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —É–¥–∞–ª—ë–Ω")

@router.message(Command("users"))
async def list_users(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        with open("paid_users.txt") as f:
            lines = f.readlines()
        text = "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        for line in lines:
            uid, exp = line.strip().split(":")
            text += f"ID: <code>{uid}</code> –¥–æ {exp}\n"
        await message.answer(text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

# –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Ñ–∏–ª—è
@router.message(Command("profile"))
async def profile(message: Message):
    uid = message.from_user.id
    access = "‚úÖ –ï—Å—Ç—å" if is_paid_user(uid) else "‚ùå –ù–µ—Ç"
    count = user_quiz_count.get(uid, 0)
    await message.answer(f"<b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\nID: <code>{uid}</code>\n–î–æ—Å—Ç—É–ø: {access}\n–¢–µ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {count}", parse_mode="HTML")

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
@router.message(Command("help"))
async def help_command(message: Message):
    await message.answer(
        "üìñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/profile ‚Äî –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/generate ‚Äî –≤–≤–µ—Å—Ç–∏ —Ç–µ–º—É –≤—Ä—É—á–Ω—É—é\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
        "\n"
        "–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_user <id> <YYYY-MM-DD> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞\n"
        "/remove_user <id> ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞\n"
        "/users ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        parse_mode="HTML"
    )

# –ö–æ–º–∞–Ω–¥–∞ /generate ‚Äî —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä —Ç–µ–º—ã
@router.message(Command("generate"))
async def manual_generate(message: Message):
    if not is_paid_user(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —Ç–µ–º—ã")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n<b>–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏ (–°—Ä–µ–¥–Ω–∏–π)</b>", parse_mode="HTML")
    user_state[message.from_user.id] = {"awaiting_prompt": True}

# –°—Ç–∞—Ä—Ç –∏ –∫–≤–∏–∑
@router.message(Command("start"))
async def start(message: Message):
    if not is_paid_user(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –ù–∞–ø–∏—à–∏—Ç–µ @shel_tg")

    keyboard = InlineKeyboardBuilder()
    subjects = ["–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "Python", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫"]
    for subj in subjects:
        keyboard.button(text=subj, callback_data=f"subject:{subj}")
    keyboard.adjust(2)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /generate –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–º—ã:", reply_markup=keyboard.as_markup())

@router.callback_query(lambda c: c.data == "manual")
async def choose_manual(callback: types.CallbackQuery):
    await manual_generate(callback.message)
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("subject:"))
async def handle_subject(callback: types.CallbackQuery):
    subject = callback.data.split(":")[1]
    user_state[callback.from_user.id] = {"subject": subject}

    keyboard = InlineKeyboardBuilder()
    for lvl in ["–õ—ë–≥–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–°–ª–æ–∂–Ω—ã–π"]:
        keyboard.button(text=lvl, callback_data=f"level:{lvl}")
    await callback.message.edit_text(f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=keyboard.as_markup())
    await callback.answer()

@router.callback_query(lambda c: c.data.startswith("level:"))
async def handle_level(callback: types.CallbackQuery):
    level = callback.data.split(":")[1]
    uid = callback.from_user.id
    state = user_state.get(uid, {})
    subject = state.get("subject")
    if not subject:
        return await callback.message.answer("–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: /start")
    prompt = f"{subject} ({level} —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –≤—ã–±—Ä–∞–ª –ø—Ä–µ–¥–º–µ—Ç '{subject}' –∏ —É—Ä–æ–≤–µ–Ω—å '{level}'")
    await callback.message.edit_text(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ: {prompt}...")
    asyncio.create_task(generate_quiz(callback.message, prompt, uid))
    await callback.answer()

@router.message()
async def handle_custom_prompt(message: Message):
    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ ‚Äî –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
    if message.text and message.text.startswith("/"):
        return
    uid = message.from_user.id
    # –†–∞–∑—Ä–µ—à–∞–µ–º –≤–≤–æ–¥ —Ç–µ–º—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "awaiting_prompt"
    if user_state.get(uid, {}).get("awaiting_prompt"):
        user_state[uid]["awaiting_prompt"] = False
        prompt = message.text
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –≤–≤—ë–ª —Ç–µ–º—É: {prompt}")
        await message.answer(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ: {prompt}...")
        asyncio.create_task(generate_quiz(message, prompt, uid))
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∏–º–∞–ª /generate ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        await message.answer("–ß—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ —Ç–µ–º—É, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /generate.")

async def generate_quiz(message: types.Message, prompt: str, uid: int):
    try:
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} –ø–æ —Ç–µ–º–µ: {prompt}")
        formatted_prompt = (
            f"{prompt}\n\n"
            "–ì–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–µ—Å—Ç-–≤–∏–∫—Ç–æ—Ä–∏–Ω—É –ø–æ –∑–∞–ø—Ä–æ—Å—É —Å—Ç—Ä–æ–≥–æ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "1. –†–æ–≤–Ω–æ 5 –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
        "2. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ - –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞.\n"
        "3. –ü–æ—Å–ª–µ –≤–æ–ø—Ä–æ—Å–∞ - 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏).\n"
        "4. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–π.\n"
        "5. –ù–∏–∫–∞–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã.\n"
        "6. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ (–≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã).\n"
        "7. –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º–∏ –∏ –ª–æ–≥–∏—á–Ω—ã–º–∏.\n"
        "8. –°–æ—Ö—Ä–∞–Ω—è–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Telegram-–æ–ø—Ä–æ—Å–∞.\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –±–µ—Å—Å–æ—é–∑–Ω–æ–µ —Å–ª–æ–∂–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ?\n"
        "–ß–∞—Å—Ç–∏ —Å–≤—è–∑–∞–Ω—ã –∏–Ω—Ç–æ–Ω–∞—Ü–∏–µ–π, –±–µ–∑ —Å–æ—é–∑–æ–≤.\n"
        "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å —Å–æ—é–∑–∞–º–∏ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏.\n"
        "–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã–º–∏ —á–ª–µ–Ω–∞–º–∏.\n"
        "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–∏–¥–∞—Ç–æ—á–Ω—ã–º–∏ —á–∞—Å—Ç—è–º–∏.\n"
        "\n"
        "–ö–∞–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é?\n"
        "–°–æ–ª–Ω—Ü–µ —Å–µ–ª–æ, –ª–µ—Å –∑–∞—Ç–∏—Ö, –∑–≤–µ–∑–¥—ã –∑–∞–∂–≥–ª–∏—Å—å.\n"
        "–°–æ–ª–Ω—Ü–µ —Å–µ–ª–æ –ª–µ—Å –∑–∞—Ç–∏—Ö –∑–≤–µ–∑–¥—ã –∑–∞–∂–≥–ª–∏—Å—å.\n"
        "–°–æ–ª–Ω—Ü–µ —Å–µ–ª–æ: –ª–µ—Å –∑–∞—Ç–∏—Ö –∑–≤–µ–∑–¥—ã –∑–∞–∂–≥–ª–∏—Å—å.\n"
        "–°–æ–ª–Ω—Ü–µ —Å–µ–ª–æ –ª–µ—Å –∑–∞—Ç–∏—Ö, –∑–≤–µ–∑–¥—ã –∑–∞–∂–≥–ª–∏—Å—å.\n"
        "\n"
        "(–∏ –µ—â—ë 3 –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ).\n\n"
        "–°—Ç—Ä–æ–≥–æ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤, —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞."
        )
        response = client.chat.completions.create(
            model="deepseek/deepseek-r1-0528:free",
            messages=[{"role": "user", "content": formatted_prompt}]
        )
        text = response.choices[0].message.content
        quizzes = process_quiz(text)
        if not quizzes:
            logger.warning(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            await message.answer("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        for quiz in quizzes:
            await bot.send_poll(
                chat_id=message.chat.id,
                question=quiz['question'],
                options=quiz['answers'],
                correct_option_id=quiz['correct_option_id'],
                type="quiz",
                is_anonymous=False
            )
        user_quiz_count[uid] += 1
        logger.info(f"–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}")

        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–±–æ—Ä
        keyboard = InlineKeyboardBuilder()
        subjects = ["–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "Python", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫"]
        for subj in subjects:
            keyboard.button(text=subj, callback_data=f"subject:{subj}")
        keyboard.button(text="–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ", callback_data="manual")
        await message.answer("–•–æ—Ç–∏—Ç–µ –µ—â—ë? –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /generate:", reply_markup=keyboard.as_markup())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

def process_quiz(text: str):
    blocks = text.strip().split("\n\n")
    quizzes = []
    for block in blocks:
        lines = block.strip().split("\n")
        if len(lines) != 5:
            continue
        question, correct, *others = lines
        options = [correct] + others
        random.shuffle(options)
        try:
            correct_id = options.index(correct)
        except ValueError:
            continue
        quizzes.append({
            "question": question,
            "answers": options,
            "correct_option_id": correct_id
        })
    return quizzes

# –ó–∞–ø—É—Å–∫
async def main():
    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="profile", description="–ü—Ä–æ—Ñ–∏–ª—å"),
        BotCommand(command="generate", description="–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –≤—Ä—É—á–Ω—É—é"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
        BotCommand(command="add_user", description="(–ê–¥–º–∏–Ω) –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        BotCommand(command="remove_user", description="(–ê–¥–º–∏–Ω) –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        BotCommand(command="users", description="(–ê–¥–º–∏–Ω) –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    ])
    dp = Dispatcher()
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
