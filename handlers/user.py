# –í—ã–Ω–µ—Å–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
import asyncio
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from utils.access import is_paid_user_wrapper as is_paid_user
from services.quiz import generate_quiz, user_quiz_count, user_state
from utils.logger import logger

user_router = Router()

@user_router.message(Command("profile"))
async def profile(message: types.Message):
    uid = message.from_user.id
    access = "‚úÖ –ï—Å—Ç—å" if is_paid_user(uid) else "‚ùå –ù–µ—Ç"
    count = user_quiz_count.get(uid, 0)
    await message.answer(f"<b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\nID: <code>{uid}</code>\n–î–æ—Å—Ç—É–ø: {access}\n–¢–µ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {count}", parse_mode="HTML")

@user_router.message(Command("help"))
async def help_command(message: types.Message):
    await message.answer(
        "üìñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/profile ‚Äî –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/generate ‚Äî –≤–≤–µ—Å—Ç–∏ —Ç–µ–º—É –≤—Ä—É—á–Ω—É—é\n"
        "/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
        "\n"
        "–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_user <code>id</code> <code>YYYY-MM-DD</code> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞\n"
        "/remove_user <code>id</code> ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞\n"
        "/users ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        parse_mode="HTML"
    )

@user_router.message(Command("generate"))
async def manual_generate(message: types.Message):
    if not is_paid_user(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–±—Ä–∞–ª —Ä—É—á–Ω–æ–π –≤–≤–æ–¥ —Ç–µ–º—ã")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n<b>–ò—Å—Ç–æ—Ä–∏—è –†–æ—Å—Å–∏–∏ (–°—Ä–µ–¥–Ω–∏–π)</b>", parse_mode="HTML")
    user_state[message.from_user.id] = {"awaiting_prompt": True}

@user_router.message(Command("start"))
async def start(message: types.Message):
    if not is_paid_user(message.from_user.id):
        return await message.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –ù–∞–ø–∏—à–∏—Ç–µ @shel_tg")

    keyboard = InlineKeyboardBuilder()
    subjects = ["–†—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "Python", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫"]
    for subj in subjects:
        keyboard.button(text=subj, callback_data=f"subject:{subj}")
    keyboard.adjust(2)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /generate –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —Ç–µ–º—ã:", reply_markup=keyboard.as_markup())

@user_router.callback_query(lambda c: c.data == "manual")
async def choose_manual(callback: types.CallbackQuery):
    await manual_generate(callback.message)
    await callback.answer()

@user_router.callback_query(lambda c: c.data.startswith("subject:"))
async def handle_subject(callback: types.CallbackQuery):
    subject = callback.data.split(":")[1]
    user_state[callback.from_user.id] = {"subject": subject}

    keyboard = InlineKeyboardBuilder()
    for lvl in ["–õ—ë–≥–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–°–ª–æ–∂–Ω—ã–π"]:
        keyboard.button(text=lvl, callback_data=f"level:{lvl}")
    await callback.message.edit_text(f"–ü—Ä–µ–¥–º–µ—Ç: {subject}\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=keyboard.as_markup())
    await callback.answer()

@user_router.callback_query(lambda c: c.data.startswith("level:"))
async def handle_level(callback: types.CallbackQuery):
    level = callback.data.split(":")[1]
    uid = callback.from_user.id
    state = user_state.get(uid, {})
    subject = state.get("subject")
    if not subject:
        return await callback.message.answer("–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: /start")
    prompt = f"{subject} ({level} —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –≤—ã–±—Ä–∞–ª –ø—Ä–µ–¥–º–µ—Ç '{subject}' –∏ —É—Ä–æ–≤–µ–Ω—å '{level}'")
    await callback.message.edit_text(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ: {prompt}...")
    asyncio.create_task(generate_quiz(callback.message, prompt, uid))
    await callback.answer()

@user_router.message()
async def handle_custom_prompt(message: types.Message):
    # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ ‚Äî –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
    if message.text and message.text.startswith("/"):
        return
    uid = message.from_user.id
    # –†–∞–∑—Ä–µ—à–∞–µ–º –≤–≤–æ–¥ —Ç–µ–º—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "awaiting_prompt"
    if user_state.get(uid, {}).get("awaiting_prompt"):
        user_state[uid]["awaiting_prompt"] = False
        prompt = message.text
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} –≤–≤—ë–ª —Ç–µ–º—É: {prompt}")
        await message.answer(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç –ø–æ —Ç–µ–º–µ: {prompt}...")
        asyncio.create_task(generate_quiz(message, prompt, uid))
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∏–º–∞–ª /generate ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        await message.answer("–ß—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ —Ç–µ–º—É, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /generate.")